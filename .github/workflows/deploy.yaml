name: Trigger Helm Deploy

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Docker Image Tag to Deploy"
        required: true
      zone:
        description: "Deployment Zone"
        required: true
        default: "staging"
  
  repository_dispatch:  # Trigger ผ่าน API
    types: [push-deploy]

env:
  GIT_BRANCH_HELM: "main"
  APP_NAME: ${{ github.event.client_payload.inputs.repo.APP_NAME }}
  IMAGE_TAG: ${{ github.event.client_payload.inputs.repo.IMAGE_TAG }}
  NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
  NEXUS_URL: "registry.matador.ais.co.th"
  NEXUS_PATH: "living/sit"
  NEXUS_USER: "living"
  CONTAINER_REPOSITORY: "ghcr.io"
  OWNER_NAME: "sompornic"
  GH_TOKEN: ${{ secrets.PAT_TOKEN }}   # ใช้ PAT Token ที่มีสิทธิ์ push
  REPO_NAME: "helm-app"  # ชื่อ repo เป้าหมาย

jobs:
  pull-and-push:
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.inputs.repo.APP_ENV == 'dev' || github.event.client_payload.inputs.repo.APP_ENV == 'staging' }}

    steps:
      - name: Checkout pipelines
        uses: actions/checkout@v3

      - name: List working directory
        run: ls

      - name: Log in to GHCR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.CONTAINER_REPOSITORY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}

      # - name: Debug Docker Info
      #   run: |
      #     docker info
      #     docker images
      # - name: Pull Image from GHCR
      #   run: docker pull ${{ env.CONTAINER_REPOSITORY }}/${{ env.OWNER_NAME }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}
      
      # - name: Tag Image for Nexus Repository
      #   run: docker tag ${{ env.CONTAINER_REPOSITORY }}/${{ env.OWNER_NAME }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} ${{ env.NEXUS_URL }}/${{ env.NEXUS_PATH }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}

      # - name: Log in using Nexus credentials
      #   run: echo "${{ secrets.NEXUS_PASSWORD }}" | docker login ${{ env.NEXUS_URL }} -u ${{ env.NEXUS_USER }} --password-stdin
      
      # - name: Push Image to Nexus Repository
      #   run: docker push ${{ env.NEXUS_URL }}/${{ env.NEXUS_PATH }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}

  edit-helm:
    needs: pull-and-push
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.inputs.repo.APP_ENV == 'dev' || github.event.client_payload.inputs.repo.APP_ENV == 'staging' }}
    steps:
    - name: Set FILE_PATH and BRANCH_NAME from APP_NAME
      run: |
        echo "FILE_PATH=${APP_NAME}/values.yaml" >> $GITHUB_ENV
        echo "BRANCH_NAME=${GIT_BRANCH_HELM}" >> $GITHUB_ENV

    - name: Update Helm values.yaml in ${{ env.BRANCH_NAME }} branch
      run: |
        RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
          "https://api.github.com/repos/$OWNER_NAME/$REPO_NAME/contents/$FILE_PATH?ref=$BRANCH_NAME")

        FILE_SHA=$(echo "$RESPONSE" | jq -r '.sha')
        FILE_CONTENT=$(echo "$RESPONSE" | jq -r '.content' | base64 -d)
        UPDATED_CONTENT=$(echo "$FILE_CONTENT" | sed "s|tag: .*|tag: $IMAGE_TAG|")
        ENCODED_CONTENT=$(echo "$UPDATED_CONTENT" | base64 -w 0)

        PAYLOAD=$(jq -n \
          --arg path "$FILE_PATH" \
          --arg message "Update image.tag to $IMAGE_TAG" \
          --arg content "$ENCODED_CONTENT" \
          --arg sha "$FILE_SHA" \
          --arg branch "$BRANCH_NAME" \
          '{ path: $path, message: $message, content: $content, sha: $sha, branch: $branch }')

        curl -X PUT -H "Authorization: token $GH_TOKEN" \
          -H "Content-Type: application/json" \
          -d "$PAYLOAD" \
          "https://api.github.com/repos/$OWNER_NAME/$REPO_NAME/contents/$FILE_PATH"

  deploy-dev:
    needs: edit-helm
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.inputs.repo.APP_ENV == 'dev' }} 
    steps:
      - name: Checkout Helm Chart Repo
        uses: actions/checkout@v3
        with:
          repository: sompornic/helm-app
          ref: main
          token: ${{ secrets.PAT_TOKEN }}
          path: helm-chart

      # - name: Set Kubernetes Context for Staging
      #   uses: azure/k8s-set-context@v1
      #   with:
      #     kubeconfig: ${{ secrets.KUBE_CONFIG_DEV }}

      # - name: Deploy with Helm
      #   run: |
      #     cd helm-chart/$APP_NAME
      #     helm upgrade --install $APP_NAME ./ --namespace testdeploy --create-namespace

  deploy-staging:
    needs: edit-helm
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.zone == 'staging' }} 
    steps:
      - name: Checkout Helm Chart Repo
        uses: actions/checkout@v3
        with:
          repository: sompornic/helm-app
          ref: main
          token: ${{ secrets.PAT_TOKEN }}
          path: helm-chart

      # - name: Set Kubernetes Context for Staging
      #   uses: azure/k8s-set-context@v1
      #   with:
      #     kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      # - name: Deploy with Helm
      #   run: |
      #     cd helm-chart/$APP_NAME
      #     helm upgrade --install $APP_NAME ./ --namespace testdeploy --create-namespace